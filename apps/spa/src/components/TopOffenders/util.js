import moment from 'moment';
import React from 'react';

export const getColumnConfig = (offenderType) => [
  {
    field: 'entityUuid',
    headerName: `Worst Offending ${offenderType.charAt(0).toUpperCase() + offenderType.substring(1).toLowerCase()}`,
    type: 'string',
    width: offenderType === 'user' ? 280 : 360,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'severity',
    headerName: 'Severity',
    type: 'number',
    width: 80,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'certainty',
    headerName: 'Certainty',
    type: 'number',
    width: 80,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'score',
    headerName: 'Score',
    type: 'number',
    width: 80,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'src',
    headerName: 'Source',
    type: 'string',
    width: 150,
    hide: offenderType === 'user',
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'dest',
    headerName: 'Destination',
    type: 'string',
    width: 150,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'timestamp',
    headerName: 'Occurred On',
    type: 'dateTime',
    width: 200,
    valueFormatter: (params) => {
      return moment(params.value).format('YYYY-MM-DD hh:mm A');
    },
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'trigger',
    headerName: 'Trigger',
    type: 'string',
    width: 300,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'entrySource',
    headerName: 'Entry Source',
    type: 'string',
    width: 400,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'entryOrigin',
    headerName: 'Entry Origin',
    type: 'string',
    width: 200,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'adminState',
    headerName: 'Admin State',
    type: 'string',
    width: 200,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'entityType',
    headerName: 'Entity Type',
    type: 'string',
    width: 100,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'caseSummary',
    headerName: 'Summary',
    type: 'string',
    width: 100,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
  {
    field: 'entryType',
    headerName: 'Entry Type',
    type: 'string',
    width: 100,
    hide: true,
    renderHeader: (params) => <strong> {params?.colDef?.headerName ?? 'Undefined'} </strong>,
  },
];
