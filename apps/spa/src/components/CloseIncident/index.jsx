import React, { useState } from 'react';
import VistaDialog, { VistaConfirm } from '@logrhythm/shared/VistaDialog';
import DoubleLabeledSwitch from '@logrhythm/shared/DoubleLabeledSwitch';
import { Alert, Autocomplete, Button, FormHelperText, Snackbar } from '@mui/material';
import { ListItemIcon, ListItemText, MenuItem, Tooltip, TextField, Stack } from '@mui/material';
import CancelPresentationIcon from '@mui/icons-material/CancelPresentation';
import OpenInBrowserIcon from '@mui/icons-material/OpenInBrowser';
import { useController, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as Yup from 'yup';

function PositiveStatusWithValidation(props) {
  const { field, fieldState } = useController(props);
  return (
    <>
      <div>
        <DoubleLabeledSwitch
          {...field}
          value={props.value}
          labels={{ left: 'False Positive', right: 'True Positive' }}
        />
        <FormHelperText error={props.error || fieldState.invalid}>{fieldState?.error?.message}</FormHelperText>
      </div>
    </>
  );
}

export default function CloseIncidentOptions() {
  const [open, setOpen] = useState(false);
  const [trueStatus, setTrueStatus] = useState(false);
  const [hideClose, setHideClose] = useState(true);
  const [title, setTitle] = useState('Close Incident');
  const [caseOpenTitle, setCaseOpenTitle] = useState('Open Case');
  const [showConfirm, setShowConfirm] = useState({ show: false, msg: '' });
  const [snackBar, setSnackBar] = useState({ show: false, msg: '', severity: 'error' });

  let reasons = [
    'Generated by threat lab - Resolved',
    'Low risk - Closed',
    'Medium risk and Resolved',
    'High risk and Resolved',
  ];

  const handleConfirm = () => {
    if (
      caseOpenTitle === 'Open Case' &&
      (title === 'Close Incident' || title === 'Incident Closed') &&
      hideClose === false
    ) {
      setShowConfirm({ show: true, msg: 'Are you want to convert Closed Incident to Case' });
    } else if (
      caseOpenTitle === 'Open Case' &&
      (title === 'Close Incident' || title === 'Incident Closed') &&
      hideClose === true
    ) {
      setShowConfirm({ show: true, msg: 'Are you want to convert Incident to Case?' });
    } else if (caseOpenTitle === 'Incident' && title === 'Close Case' && hideClose === true) {
      setShowConfirm({ show: true, msg: 'Are you want to convert Case to Incident?' });
    } else if (caseOpenTitle === 'Incident' && title === 'Close Case' && hideClose === false) {
      setShowConfirm({ show: true, msg: 'Are you want to convert Closed Case to Incident?' });
    } else if (caseOpenTitle === 'Incident' && title === 'Incident Closed') {
      setShowConfirm({ show: true, msg: 'Are you want to convert Closed Incident to Incident' });
    } else if (caseOpenTitle === 'Incident' && title === 'Case Closed') {
      setShowConfirm({ show: true, msg: 'Are you want to convert Closed Case to Incident' });
    } else if (caseOpenTitle === 'Open Case' && title === 'Case Closed') {
      setShowConfirm({ show: true, msg: 'Are you want to convert Closed Case to Case' });
    }
  };
  const handleClickOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const handleTrueStatus = (event) => setTrueStatus(event.target.checked);
  const handleCaseUpdate = () => {
    if (caseOpenTitle === 'Open Case') {
      setShowConfirm({ show: false, msg: '' });
      setSnackBar({ show: true, msg: 'Case was opened', severity: 'success' });
      setCaseOpenTitle('Incident');
      setTitle('Close Case');
      setHideClose(true);
    } else {
      setShowConfirm({ show: false, msg: '' });
      setSnackBar({ show: true, msg: 'Incident was opened', severity: 'success' });
      setCaseOpenTitle('Open Case');
      setTitle('Close Incident');
      setHideClose(true);
    }
  };
  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackBar({ show: false, msg: '', severity: 'error' });
  };

  const validationSchema = Yup.object().shape({
    positiveStatus: Yup.bool().required('Positive Status is Required'),
    reasons: Yup.string().required('Reason is required'),
  });
  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
  } = useForm({ resolver: yupResolver(validationSchema), mode: 'onChange' });
  const onSubmit = (validationData) => {
    console.log('validationData: ', validationData);
    if (title === 'Close Incident') {
      handleClose();
      setSnackBar({ show: true, msg: 'Incident was closed successfully', severity: 'success' });
      setHideClose(false);
      setTitle('Incident Closed');
      setCaseOpenTitle('Incident');
    } else {
      handleClose();
      setSnackBar({ show: true, msg: 'Case was closed successfully', severity: 'success' });
      setHideClose(false);
      setTitle('Case Closed');
      setCaseOpenTitle('Open Case');
    }
  };
  return (
    <>
      {hideClose && (
        <Tooltip
          title={title === 'Close Incident' || title === 'Incident Closed' ? 'Close Incident' : 'Close Case'}
          arrow
        >
          <MenuItem key={3} onClick={handleClickOpen}>
            <ListItemIcon>
              <CancelPresentationIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText>{title}</ListItemText>
          </MenuItem>
        </Tooltip>
      )}
      <Tooltip title={caseOpenTitle} arrow>
        <MenuItem key={4} onClick={handleConfirm}>
          <ListItemIcon>
            <OpenInBrowserIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>{caseOpenTitle}</ListItemText>
        </MenuItem>
      </Tooltip>
      <VistaDialog
        isOpen={open}
        handleClose={handleClose}
        title={title === 'Close Incident' || title === 'Incident Closed' ? 'Close Incident' : 'Close Case'}
        disableBackdropClick={true}
        maxWidth="xs"
        Actions={
          <Button onClick={handleSubmit(onSubmit)} variant={'outlined'} color={'error'}>
            {title === 'Close Incident' || title === 'Incident Closed' ? 'Close Incident' : 'Close Case'}
          </Button>
        }
      >
        <form>
          <Stack direction="row" spacing={9} sx={{ mt: 1, m: 1 }}>
            <PositiveStatusWithValidation
              control={control}
              name="positiveStatus"
              onChange={handleTrueStatus}
              value={trueStatus}
              msg="Positive Status is Required"
            />
            {/*<DoubleLabeledSwitch value={trueStatus} labels={{ left: 'False Positive', right: 'True Positive' }} />*/}
          </Stack>
          <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
            <Autocomplete
              freeSolo
              //disableClearable={false}
              fullWidth={true}
              renderInput={(params) => (
                <TextField
                  {...params}
                  {...register('reasons')}
                  error={!!errors.reasons}
                  helperText={errors?.reasons?.message}
                  label="Reason"
                  variant="standard"
                  InputProps={{
                    ...params.InputProps,
                    type: 'search',
                  }}
                />
              )}
              options={reasons}
            />
          </Stack>
        </form>
      </VistaDialog>
      <VistaConfirm
        isOpen={showConfirm.show}
        acceptButtonText={'Yes'}
        maxWidth={'sm'}
        rejectButtonText={'No'}
        handleAccept={handleCaseUpdate}
        handleReject={() => setShowConfirm({ show: false, msg: '' })}
        handleClose={() => setShowConfirm({ show: false, msg: '' })}
      >
        {showConfirm.msg}
      </VistaConfirm>
      <Snackbar
        open={snackBar.show}
        autoHideDuration={12000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleSnackbarClose} severity={snackBar.severity} sx={{ width: '100%' }}>
          {snackBar.msg}
        </Alert>
      </Snackbar>
    </>
  );
}
